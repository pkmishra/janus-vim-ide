{"body":"# Janus: Vim Distribution\r\n\r\nThis is a distribution of plug-ins and mappings for Vim, Gvim and\r\nMacVim. It is forked from https://github.com/carlhuda/janus however I am also adding few plugins and modified .vimrc.after\r\nfile so that other can use it directly. In case you face any issue please let me know.\r\n\r\n Extra plugins added\r\n \r\n    https://github.com/jistr/vim-nerdtree-tabs \r\n    https://github.com/vim-scripts/HTML-AutoCloseTag \r\n    https://github.com/maksimr/vim-jsbeautify\r\n    https://github.com/jnwhteh/vim-golang\r\n    https://github.com/hallettj/jslint.vim\r\n    \r\nApart from nice features provided by Janus Following extra features have been added<br />\r\n\r\n1. NerdTree will open in each tab by default - It will always look the\r\n   same in all tabs<br />\r\n2. Autocomplete for Html, XML, XSL, XHTML file extension by default<br />\r\n3. By Default XML opened will be folded<br />\r\n4. Remove trailing whitespaces and ^M chars<br />\r\n5. Golang support<br />\r\n6. JSLint support <br />\r\n\r\n#Usage Instructions\r\n1. run the add-custom-plugin.sh file\r\n2. copy content from .vimrc.after and append it in your .vimrc.after\r\n   file which is located in $HOME directory\r\n\r\n#Extra Item\r\nTo use 'go to definition' I am using ctags. To generate tags use following command in your project directory<br />\r\nctags *\r\n\r\nAnd add following line in your .vimrc.after<br />\r\n set tags=tags,./tags;$HOME\r\n\r\nfurther you can use following keyboard shortcuts<br />\r\nC-] - go to definition <br />\r\nC-T - Jump back from the definition.<br />\r\nC-W C-] - Open the definition in a horizontal split<br />\r\n\r\nC-\\ - Open the definition in a new tab<br />\r\nA-] - Open the definition in a vertical split<br />\r\n\r\nAfter the tags are generated. You can use the following keys to tag into and tag out of functions:\r\n\r\n\r\nIt is designed to provide minimal working environment using the most\r\npopular plug-ins and the most common mappings.\r\n\r\nThe distribution is completely customisable using a `~/.vimrc.before`\r\nand `~/.vimrc.after` Vim RC files.\r\n\r\n##NOTE: if you are geeting error that color Zenburn not found \r\n-Just go to colors directory create a folder called Zenburn and \r\n- use following command\r\n- wget -O Zenburn.vim http://www.vim.org/scripts/download_script.php?src_id=6149\r\n\r\n## Customization\r\n\r\nYou can use `~/.gvimrc.before` and `~/.vimrc.before` for settings Janus itself uses,\r\nsuch as the __leader__ setting. You may also use `~/.gvimrc.after` and\r\n`~/.vimrc.after` for any additional settings; it is also a good place for\r\noverriding Janus settings, as both files will be loaded at the end of\r\nJanus.\r\n\r\nFor example, to override the default color schemes:\r\n\r\n```bash\r\n$ echo 'color desert'  >> ~/.vimrc.after\r\n$ echo 'color molokai' >> ~/.gvimrc.after\r\n```\r\n\r\nIf you want to do additional customization or add more Vim plugins,\r\ncreate a `~/.janus` directory and add your plugins there, either with a\r\n`git clone` or by adding submodules to your own git repository there.\r\nThis directory is treated like a normal pathogen directory. For example:\r\n\r\n```bash\r\n$ cd ~/.janus\r\n$ git clone https://github.com/vim-scripts/Rename2.git rename2\r\n```\r\n\r\nOr, if you have a git repository in `~/.janus`, you can use a submodule:\r\n\r\n```bash\r\n$ cd ~/.janus\r\n$ git submodule add https://github.com/vim-scripts/Rename2.git rename2\r\n```\r\n\r\nIf you would like to disable an included plug-in, you can do that with\r\nthe `janus#disable_plugin()` function from inside your\r\n`~/.vimrc.before`. This function takes a plug-in name as an argument\r\nwithout the group. For example, if you would like to disable the\r\nNERDCommenter plug-in, you can do that with the command:\r\n\r\n```bash\r\n$ echo \"call janus#disable_plugin('nerdcommenter')\" >> ~/.vimrc.before\r\n```\r\n\r\n**WARNING**: We've noticed over and over, that people fork Janus just to\r\ncustomize it. This is bad practice for several reasons and you should\r\nnot do that, and here's why:\r\n\r\n- Janus is fully customisable and there's no need to change the core for\r\n  using a different plugin fork or using a different mapping.\r\n- Forking means maintenance; maintenance means burden. Do not burden\r\n  yourself with maintaining a fork; that's what the `~/.janus` folder\r\n  is for.\r\n\r\nIf you find yourself needing a customisation that is not possible with\r\nthe current setup, then please open an issue or consider submitting a\r\npull request to make it possible to continue using/improving the official repo.\r\n\r\n**WARNING**: Any **uncommited** files inside the **janus** folder will be\r\nremoved the next time you run `rake` so make sure to either put them in\r\nthe custom folder (`~/.janus`), or commit them. We clean the janus\r\nfolder in case we replace a manually installed plugin (using rake tasks)\r\nwith a submodule.\r\n\r\nFor more information on how to customize Janus, you might want to take\r\na look at the [Customization wiki\r\npage](https://github.com/carlhuda/janus/wiki/Customization).\r\n\r\n# Intro to VIM\r\n\r\nHere're some tips in case you've never used VIM before:\r\n\r\n## Tutorials\r\n\r\n* Type `vimtutor` into a shell to go through a brief interactive\r\n  tutorial inside VIM.\r\n* Read the slides at [VIM: Walking Without Crutches](http://walking-without-crutches.heroku.com/#1).\r\n* Watch the screencasts at [vimcasts.org](http://vimcasts.org/)\r\n* Watch Derek Wyatt's energetic tutorial videos at [his site](http://www.derekwyatt.org/vim/vim-tutorial-videos/)\r\n* Read wycats' perspective on learning Vim at\r\n  [Everyone who tried to convince me to use vim was wrong](http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/)\r\n* Read this and other answers to a question about vim at StackOverflow:\r\n  [Your problem with Vim is that you don't grok vi](http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118)\r\n\r\n## Modes\r\n\r\n* VIM has two modes:\r\n  * insert mode- stuff you type is added to the buffer\r\n  * normal mode- keys you hit are interpreted as commands\r\n* To enter insert mode, hit `i`\r\n* To exit insert mode, hit `<ESC>`\r\n\r\n## Useful commands\r\n\r\n* Use `:q` to exit vim\r\n* Certain commands are prefixed with a `<Leader>` key, which maps to `\\`\r\n  by default. You can, for example, use `let mapleader = \",\"` to change this to a comma. If you want this\r\n  to be in effect for uses of `<Leader>` in the .vimrc file, make sure to define\r\n  this in `~/.vimrc.before`\r\n* Keyboard [cheat sheet](http://walking-without-crutches.heroku.com/image/images/vi-vim-cheat-sheet.png).\r\n\r\n# Features\r\n\r\nThis Vim distribution includes a number of packages built by others.\r\n\r\n## Base Customizations\r\n\r\nJanus ships with a number of basic customizations for vim:\r\n\r\n* Line numbers\r\n* Ruler (line and column numbers)\r\n* No wrap (turn off per-buffer via :set wrap)\r\n* Soft 2-space tabs, and default hard tabs to 2 spaces\r\n* Show trailing whitespace as `.`\r\n* Make searching highlighted, incremental, and case insensitive unless a\r\n  capital letter is used\r\n* Always show a status line\r\n* Allow backspacing over everything (indentations, eol, and start\r\n  characters) in insert mode\r\n* `<C-P>` inserts the directory of the current file into a command\r\n* Automatically resize splits when resizing the Vim window (GUI only)\r\n* `<leader>ew` expands to `:e (directory of current file)/` (open in the\r\n  current buffer)\r\n* `<leader>es` expands to `:sp (directory of current file)/` (open in a\r\n  horizontal split)\r\n* `<leader>ev` expands to `:vsp (directory of current file)/` (open in\r\n  a vertical split)\r\n* `<leader>et` expands to `:tabe (directory of current file)/` (open in\r\n  a new tab)\r\n* `:w!!` expands to `%!sudo tee > /dev/null %`. Write to the current file\r\n  using sudo (if you forgot to run it with sudo), it will prompt for\r\nsudo password when writing\r\n* `<F4>` toggles paste mode\r\n* `<leader>fef` formats the entire file\r\n* `<leader>u` converts the entire word to uppercace\r\n* `<leader>l` converts the entire word to lowercase\r\n* `<leader>U` converts the first char of a word to uppercase\r\n* `<leader>L` converts the first char of a word to lowercase\r\n* `<leader>cd` changes the path to the active buffer's file\r\n* `<leader>md` creates the directory of the active buffer's file\r\n  (For example, when editing a new file for which the path does not\r\nexist.)\r\n* `gw` swaps the current word with the following word\r\n* `<leader>ul` underlines the current line with `=`\r\n* `<leader>tw` toggles wrap\r\n* `<leader>fc` finds the next conflict marker (tested with Git\r\n  conflicted files)\r\n* Remap `<Down>` and `<Up>` to `gj` and `gk` (Wrapped text is not\r\n  considered a single long line of text.)\r\n* `<leader>hs` toggles highlight search\r\n* `<leader>=` adjusts viewports to the same size (`<C-w>=`)\r\n* `<A-[` (`<D-[` on MacVim) shifts current line or selected lines\r\n  rightwards\r\n* `<A-]` (`<D-]` on MacVim) shifts current line or selected lines\r\n  leftwards\r\n* `<C-W>!` invokes kwbd plugin; it closes all open buffers in the open\r\n  windows but keeps the windows open\r\n\r\n## [Ack.vim](http://github.com/mileszs/ack.vim)\r\n\r\nAck.vim uses ack to search inside the current directory for a pattern.\r\nYou can learn more about it with :help Ack.\r\n\r\n**Customizations**: Janus rebinds command-shift-f (`<D-F>`) to bring up\r\n`:Ack `.\r\n\r\n## [CtrlP](https://github.com/kien/ctrlp.vim)\r\n\r\nFuzzy file, buffer, mru and tag finder. Replaces [Command-T](https://github.com/wincent/Command-T)\r\n\r\n**Customizations**: For users of Command-T Janus maps CtrlP to command-t (`<D-t>`)\r\n\r\n## [NERDCommenter](http://github.com/ddollar/nerdcommenter)\r\n\r\nNERDCommenter allows you to wrangle your code comments, regardless of\r\nfiletype. View `:help NERDCommenter` for all the details.\r\n\r\n**Customizations**: Janus binds command-/ (`<D-/>`) to toggle comments.\r\n\r\n## [NERDTree](https://github.com/scrooloose/nerdtree)\r\n\r\nNERDTree is a file explorer plugin that provides \"project drawer\"\r\nfunctionality to your vim projects.  You can learn more about it with\r\n:help NERDTree.\r\n\r\n**Customizations**: Janus adds a number of customizations to the core\r\nNERDTree:\r\n\r\n* Use `<Leader>n` to toggle NERDTree\r\n* Ignore compiled ruby, python, and java files\r\n* When opening vim with vim /path, open the left NERDTree to that\r\n  directory, set the vim pwd, and clear the right buffer\r\n* In general, assume that there is a single NERDTree buffer on the left\r\n  and one or more editing buffers on the right\r\n\r\n## [SuperTab](http://github.com/ervandew/supertab)\r\n\r\nIn insert mode, start typing something and hit `<TAB>` to tab-complete\r\nbased on the current context.\r\n\r\n## [Syntastic](https://github.com/scrooloose/syntastic/)\r\n\r\nSyntastic is a syntax checking plugin that runs buffers through external syntax \r\ncheckers as they are saved and opened. If syntax errors are detected, the user \r\nis notified and is happy because they didn't have to compile their code or \r\nexecute their script to find them.\r\n\r\n## [Tagbar](https://github.com/majutsushi/tagbar)\r\n\r\nTagbar is a vim plugin for browsing the tags of source code files.\r\n\r\n**Customizations**: Janus binds `<Leader>rt` to toggle Tagbar.\r\n\r\n## [EasyMotion](https://github.com/Lokaltog/vim-easymotion)\r\n\r\nEasyMotion provides a much simpler way to use some motions in vim. It\r\ntakes the <number> out of <number>w or <number>f{char} by highlighting\r\nall possible choices and allowing you to press one key to jump directly\r\nto the target.\r\n\r\nWhen one of the available motions is triggered, all visible text\r\npreceding or following the cursor is faded, and motion targets are\r\nhighlighted.\r\n\r\nEasyMotion is triggered by one of the provided mappings.\r\n\r\ncheck EasyMotion's [home\r\npage](https://github.com/Lokaltog/vim-easymotion) for more information.\r\n\r\n## [NrrwRgn](https://github.com/chrisbra/NrrwRgn)\r\n\r\nNarrowing means focussing on a region and making the rest inaccessible.\r\nYou simply select the region, call :NarrowRegion and the selected part\r\nwill open in a new scratch buffer. The rest of the file will be\r\nprotected, so you won't accidentally modify that buffer. In the new\r\nbuffer, you can do a global replace, search or anything else to modify\r\nthat part. When you are finished, simply write that buffer (e.g. by\r\n|:w|) and your modifications will be put in the original buffer making\r\nit accessible again.\r\n\r\n## Git Support ([Fugitive](http://github.com/tpope/vim-fugitive))\r\n\r\nFugitive adds pervasive git support to git directories in vim. For more\r\ninformation, use `:help fugitive`\r\n\r\nUse `:Gstatus` to view `git status` and type `-` on any file to stage or\r\nunstage it. Type `p` on a file to enter `git add -p` and stage specific\r\nhunks in the file.\r\n\r\nUse `:Gdiff` on an open file to see what changes have been made to that\r\nfile\r\n\r\n**customizations**:\r\n\r\n* `<leader>gb` maps to `:Gblame<CR>`\r\n* `<leader>gs` maps to `:Gstatus<CR>`\r\n* `<leader>gd` maps to `:Gdiff<CR>`\r\n* `<leader>gl` maps to `:Glog<CR>`\r\n* `<leader>gc` maps to `:Gcommit<CR>`\r\n* `<leader>gp` maps to `:Git push<CR>`\r\n\r\n## [ZoomWin](http://github.com/vim-scripts/ZoomWin)\r\n\r\nWhen working with split windows, ZoomWin lets you zoom into a window and\r\nout again using `Ctrl-W o`\r\n\r\n**Customizations**: Janus binds `<leader>zw` to `:ZoomWin`\r\n\r\n## [BufferGator](https://github.com/jeetsukumaran/vim-buffergator)\r\n\r\nBuffergator is a plugin for listing, navigating between, and selecting\r\nbuffers to edit. Upon invocation (using the command, `:BuffergatorOpen`\r\nor `BuffergatorToggle`, or the provided key mapping, `<Leader>b`), a\r\n`catalog` of listed buffers are displayed in a separate new window split\r\n(vertical or horizontal, based on user options; default = vertical).\r\nFrom this \"buffer catalog\", a buffer can be selected and opened in an\r\nexisting window, a new window split (vertical or horizontal), or a new\r\ntab page.\r\n\r\nSelected buffers can be \"previewed\", i.e. opened in a window or tab\r\npage, but with focus remaining in the buffer catalog. Even better, you\r\ncan \"walk\" up and down the list of buffers shown in the catalog by using\r\n`<C-N>` (or `<SPACE>`) / `<C-P>` (or `<C-SPACE>`). These keys select the\r\nnext/previous buffer in succession, respectively, opening it for preview\r\nwithout leaving the buffer catalog viewer.\r\n\r\n## [Vroom](https://github.com/skalnik/vim-vroom)\r\n\r\nVRoom is a plugin inspired by [Gary Bernhardt's vim\r\nconfig](https://github.com/garybernhardt/dotfiles/blob/69330074b7a15c67efa4594a71fa91592f1ce4f9/.vimrc#L286-342) \r\nfor running your ruby tests/specs/features.\r\n\r\nImagine you're hacking on a Rails controller, when you switch to the\r\ntest or specs for the controller, you can use `<leader>r` to run all the\r\nspecs or `<leader>R` to run the closest spec, then you can jump back to\r\nthe controller hack on it and use `<leader>r` to run the last spec you\r\nran last time, so you don't need to open the test again.\r\n\r\nThen benefits of this plugin are to centralize your workflow in one\r\nwindow, one software to do it all, which is a huge speedup over using\r\n`tmux` or multiple terminal tabs.\r\n\r\n## Additional Syntaxes\r\n\r\nJanus ships with a few additional syntaxes:\r\n\r\n* Markdown (bound to \\*.markdown, \\*.md, and \\*.mk)\r\n* Mustache (bound to \\*.mustache)\r\n* Haml (bound to \\*.haml)\r\n* Sass (bound to \\*.sass)\r\n* SCSS (bound to \\*.scss)\r\n* An improved JavaScript syntax (bound to \\*.js)\r\n* Javascript for any file having `nodejs` in the shebang.\r\n* Map Gemfile, Rakefile, Vagrantfile, Procfile, Thorfile, config.ru and\r\n  *.rake to Ruby.\r\n* Git commits (set your `EDITOR` to `vim -f` or  `mvim -f` on OSX)\r\n  `$ echo \"export EDITOR='vim -f'\" >> ~/.bashrc`, you can also use Git\r\n  global config to set this if you have EDITOR set to something else\r\n  `$ git config --global core.editor 'vim -f'`\r\n\r\n## Rakefile\r\n\r\nIf you're looking for the old janus distribution controlled by a\r\nRakefile then please head over to the [rakefile\r\nbranch](https://github.com/carlhuda/janus/tree/rakefile) but please note\r\nthat the rakefile branch will not be maintained.\r\n\r\n## License\r\n\r\n### This code is free to use under the terms of the MIT license.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included\r\nin all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Janus-vim-ide","tagline":"Adding few plugins and modified .vimrc.after file so that other can use beautiful Janus vim like IDE"}